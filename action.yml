name: "ZKsync Server Action (L1 + L2)"
description: "Starts anvil (L1) and zksync_os_server (L2) for L1-L2 testing"
author: "dutterbutter"
branding:
  icon: "server"
  color: "blue"

inputs:
  version:
    description: "Release tag (e.g. v0.8.2) or 'latest'"
    default: "latest"
  include_prerelease:
    description: "Allow pre-releases when version is 'latest'"
    default: "false"
  repo:
    description: "Owner/repo for releases"
    default: "matter-labs/zksync-os-server"
  l1_port:
    description: "L1 (Anvil) RPC port"
    default: "8545"
  l2_port:
    description: "L2 (ZKsync OS) RPC port"
    default: "3050"
  linux_arch:
    description: "Linux arch (x86_64 or aarch64)"
    default: "x86_64"
  wait_seconds:
    description: "Seconds to wait for L2 readiness"
    default: "300"
  set_env:
    description: "If 'true', export ETH_RPC and ZKSYNC_RPC to GITHUB_ENV"
    default: "true"

outputs:
  l1_rpc_url:
    description: "Resolved L1 RPC URL"
    value: ${{ steps.vars.outputs.l1 }}
  l2_rpc_url:
    description: "Resolved L2 RPC URL"
    value: ${{ steps.vars.outputs.l2 }}
  resolved_version:
    description: "Resolved tag actually used (e.g. v0.8.2)"
    value: ${{ steps.resolve.outputs.tag }}

runs:
  using: "composite"
  steps:
    - id: vars
      shell: bash
      run: |
        echo "l1=http://127.0.0.1:${{ inputs.l1_port }}" >> "$GITHUB_OUTPUT"
        echo "l2=http://127.0.0.1:${{ inputs.l2_port }}" >> "$GITHUBOUTPUT"  # compatibility
        echo "l2=http://127.0.0.1:${{ inputs.l2_port }}" >> "$GITHUB_OUTPUT"

    # Resolve 'latest' via GitHub API (optionally including pre-releases)
    - id: resolve
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const repo = core.getInput('repo', { required: true });
          const version = (core.getInput('version') || 'latest').trim();
          const includePre = (core.getInput('include_prerelease') || 'false').toLowerCase() === 'true';

          let tag = version;
          if (version === 'latest') {
            if (includePre) {
              const releases = await github.paginate(github.rest.repos.listReleases, {
                owner: repo.split('/')[0],
                repo: repo.split('/')[1],
                per_page: 10,
              });
              const rel = releases.find(r => !r.draft);
              if (!rel) core.setFailed(`No releases found for ${repo}`);
              tag = rel.tag_name;
            } else {
              const res = await github.rest.repos.getLatestRelease({
                owner: repo.split('/')[0],
                repo: repo.split('/')[1],
              });
              tag = res.data.tag_name;
            }
          }

          core.setOutput('tag', tag);
          core.setOutput('base', `https://github.com/${repo}/releases/download/${tag}`);

    - name: Download release assets
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p .zks && cd .zks
        base="${{ steps.resolve.outputs.base }}"
        tag="${{ steps.resolve.outputs.tag }}"
        arch="${{ inputs.linux_arch }}"
        tgz="zksync-os-server-${tag}-${arch}-unknown-linux-gnu.tar.gz"

        echo "Resolved tag: $tag"
        echo "Downloading assets from: $base"
        curl -sSL -O "$base/$tgz"
        curl -sSL -O "$base/zkos-l1-state.json"
        curl -sSL -O "$base/genesis.json"

        tar -xzf "$tgz"
        chmod +x zksync_os_bin

    - name: Start Anvil (L1) and wait
      shell: bash
      run: |
        set -euo pipefail
        cd .zks
        nohup anvil --load-state zkos-l1-state.json --port ${{ inputs.l1_port }} > anvil.log 2>&1 &
        for i in {1..60}; do
          if curl -sS -X POST "http://127.0.0.1:${{ inputs.l1_port }}" \
              -H 'content-type: application/json' \
              --data '{"jsonrpc":"2.0","id":1,"method":"eth_blockNumber","params":[]}' | grep -q '"result"'; then
            echo "Anvil ready"
            exit 0
          fi
          sleep 1
        done
        echo "Anvil not ready"; tail -n 200 anvil.log || true; exit 1

    - name: Start ZKsync OS server (L2) and wait
      shell: bash
      run: |
        set -euo pipefail
        cd .zks
        nohup ./zksync_os_bin > l2.log 2>&1 &
        for i in $(seq 1 ${{ inputs.wait_seconds }}); do
          if curl -sS -X POST "http://127.0.0.1:${{ inputs.l2_port }}" \
              -H 'content-type: application/json' \
              --data '{"jsonrpc":"2.0","id":1,"method":"eth_blockNumber","params":[]}' | grep -q '"result"'; then
            echo "L2 JSON-RPC ready"
            exit 0
          fi
          sleep 1
        done
        echo "L2 JSON-RPC not ready"; tail -n 400 l2.log || true; exit 1

    - name: Export RPC URLs
      if: ${{ inputs.set_env == 'true' }}
      shell: bash
      run: |
        echo "ETH_RPC=${{ steps.vars.outputs.l1 }}" >> "$GITHUB_ENV"
        echo "ZKSYNC_RPC=${{ steps.vars.outputs.l2 }}" >> "$GITHUB_ENV"

    - name: Print endpoints
      shell: bash
      run: |
        echo "ETH_RPC=${{ steps.vars.outputs.l1 }}"
        echo "ZKSYNC_RPC=${{ steps.vars.outputs.l2 }}"
        echo "RESOLVED_ZKSYNC_VERSION=${{ steps.resolve.outputs.tag }}"
