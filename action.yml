name: "ZKsync Server Action (L1 + L2)"
description: "Starts anvil (L1) and zksync_os_server (L2) for L1-L2 testing"
author: "dutterbutter"
branding:
  icon: "server"
  color: "blue"

inputs:
  version:
    description: "Release tag (e.g. v0.8.2) or 'latest'"
    default: "latest"
  include_prerelease:
    description: "Allow pre-releases when version is 'latest'"
    default: "false"
  l1_port:
    description: "L1 (Anvil) RPC port"
    default: "8545"
  l2_port:
    description: "L2 (ZKsync OS) RPC port"
    default: "3050"
  linux_arch:
    description: "Linux arch (x86_64 or aarch64)"
    default: "x86_64"
  set_env:
    description: "If 'true', export ETH_RPC and ZKSYNC_RPC to GITHUB_ENV"
    default: "true"
  boot_grace_seconds:
    description: "Seconds to wait after starting each server before moving on"
    default: "3"

outputs:
  l1_rpc_url:
    description: "Resolved L1 RPC URL"
    value: ${{ steps.vars.outputs.l1 }}
  l2_rpc_url:
    description: "Resolved L2 RPC URL"
    value: ${{ steps.vars.outputs.l2 }}
  resolved_version:
    description: "Resolved tag actually used (e.g. v0.8.2)"
    value: ${{ steps.resolve.outputs.tag }}

runs:
  using: "composite"
  steps:
    - id: vars
      shell: bash
      run: |
        echo "l1=http://127.0.0.1:${{ inputs.l1_port }}" >> "$GITHUB_OUTPUT"
        echo "l2=http://127.0.0.1:${{ inputs.l2_port }}" >> "$GITHUB_OUTPUT"

    - id: resolve
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const owner = 'matter-labs';
          const repo  = 'zksync-os-server';

          const version = core.getInput('version')?.trim() || 'latest';
          const includePre = (core.getInput('include_prerelease') || 'false').toLowerCase() === 'true';

          let tag = version;

          async function latestStable() {
            const res = await github.rest.repos.getLatestRelease({ owner, repo });
            return res.data.tag_name;
          }

          async function latestIncludingPrerelease() {
            const releases = await github.paginate(github.rest.repos.listReleases, {
              owner, repo, per_page: 20,
            });
            const rel = releases.find(r => !r.draft);
            if (!rel) throw new Error(`No releases found for ${owner}/${repo}`);
            return rel.tag_name;
          }

          try {
            if (version === 'latest') {
              tag = includePre ? await latestIncludingPrerelease() : await latestStable();
            }
            core.info(`Resolved zksync-os-server tag: ${tag}`);
            core.setOutput('tag', tag);
            core.setOutput('base', `https://github.com/${owner}/${repo}/releases/download/${tag}`);
          } catch (err) {
            core.setFailed(`Failed to resolve release tag for ${owner}/${repo}: ${err.message || err}`);
          }

    - name: Download release assets
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p .zks && cd .zks
        base="${{ steps.resolve.outputs.base }}"
        tag="${{ steps.resolve.outputs.tag }}"
        arch="${{ inputs.linux_arch }}"
        tgz="zksync-os-server-${tag}-${arch}-unknown-linux-gnu.tar.gz"

        echo "Resolved tag: $tag"
        echo "Downloading assets from: $base"
        curl -fL --retry 5 --retry-all-errors -o "$tgz" "$base/$tgz"
        curl -fL --retry 5 --retry-all-errors -O "$base/zkos-l1-state.json"
        curl -fL --retry 5 --retry-all-errors -O "$base/genesis.json"
        mkdir -p genesis
        mv -f genesis.json genesis/genesis.json

        echo "Listing archive contents:"
        tar -tzf "$tgz" | sed -n '1,200p'

        tar -xzf "$tgz"

        if [[ ! -f ./zksync-os-server ]]; then
          echo "ERROR: expected ./zksync-os-server in the archive but didn't find it."
          find . -maxdepth 2 -type f -print
          exit 1
        fi

        chmod +x ./zksync-os-server
        echo "Binary ready: ./zksync-os-server"

    - name: Start Anvil (L1)
      shell: bash
      run: |
        set -euo pipefail
        cd .zks
        echo "Launching anvil fully detached on :${{ inputs.l1_port }}..."
        nohup anvil --load-state zkos-l1-state.json --port ${{ inputs.l1_port }} > anvil.log 2>&1 < /dev/null &
        echo $! > anvil.pid
        sleep "${{ inputs.boot_grace_seconds }}"
        if ! kill -0 "$(cat anvil.pid)" 2>/dev/null; then
          echo "Anvil exited during initial grace. Dumping anvil.log:"
          sed -n '1,200p' anvil.log || true
          exit 1
        fi
        disown || true
        echo "Anvil launched (pid: $(cat anvil.pid))."

    - name: Start ZKsync OS server (L2)
      shell: bash
      run: |
        set -euo pipefail
        cd .zks
        export L1_RPC="http://127.0.0.1:${{ inputs.l1_port }}"
        export GENESIS="$(pwd)/genesis/genesis.json"
        export PORT="${{ inputs.l2_port }}"
        export RUST_LOG=info

        echo "Launching zksync-os-server fully detached on :${{ inputs.l2_port }}..."
        setsid bash -c 'exec ./zksync-os-server </dev/null >>l2.log 2>&1' &
        echo $! > l2.pid
        sleep "${{ inputs.boot_grace_seconds }}"
        if ! kill -0 "$(cat l2.pid)" 2>/dev/null; then
          echo "zksync-os-server exited during initial grace. Dumping l2.log:"
          sed -n '1,200p' l2.log || true
          exit 1
        fi
        disown || true
        echo "ZKsync OS launched (pid: $(cat l2.pid))."

    - name: Export RPC URLs
      if: ${{ inputs.set_env == 'true' }}
      shell: bash
      run: |
        echo "ETH_RPC=${{ steps.vars.outputs.l1 }}" >> "$GITHUB_ENV"
        echo "ZKSYNC_RPC=${{ steps.vars.outputs.l2 }}" >> "$GITHUB_ENV"

    - name: Print endpoints
      shell: bash
      run: |
        echo "ETH_RPC=${{ steps.vars.outputs.l1 }}"
        echo "ZKSYNC_RPC=${{ steps.vars.outputs.l2 }}"
        echo "RESOLVED_ZKSYNC_VERSION=${{ steps.resolve.outputs.tag }}"
